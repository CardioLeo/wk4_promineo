# Author:
#
#
#


**string literals, ` <<< backtics to call back variables, easier to read

let firstName = "frank";
let lastName = "stepanski";
console.log(`is amzing!!!`);



**const greeting = function(name) {
	return "Hello $(name)!"
}

console.log(greeting(name)); //like this?

const greeting = function(name) {
	return "Hello $(name)!";
};

//didn't know you could declare variables like this;

"always use template literals"?

---

template literals
arrow functions
callbacks
promises (to be discussed another time)

---

var, global or function scope. a variable declared outside of a function becomes a global variable.

let, code block {} scoped. this is how most programming languages work with the only difference that variables are hoisted to the top of the code block

const, same scope as let, but value cannot be changed after set

const AZ_SALES_TAX = 0.056;
AZ_SALES_TAX = 0; //Error

---

function something() {
if (something) {
	let myVariable = "frank"
}
}

console.log(myVariable); //error, codeblock scope error?;

generally you want scope to be as small as possible; generally then, you want variables declared within local scopes.

---

function expressions

not every function needs parameters or a return statement;

can have multiple parameters and multiple return statements, but only return statement will run; conditionals and default, etc.

function name(firstName, lastName) {
	return firstName;
}

name("frank");

just above, here "fristName" is a variable whose scope is function level. Its scope is the entire function.

if (parameters) {
return "don't use const, let, var";
}

"an anti-pattern"

don't modify parameter values; copy and modify;

an anti-pattern is something you don't want to go; good coding strategies, best practices.

---

more robust, efficient code: to say this:

const greeting = function(name) {
	return "Hello $(name)!";
}

console.log(greeting("frank"));

---

Arrow functions, shortend for function expressions;

const greeting2 = (name) => {
	return "Hello $(name)";
}

uses "=>" instead of "function" above, put on right side instead of keyword on left side. "(name) =>" instead of "function (name)".

can also be written w/out parameters "() => {}"

exactly the same, just without "function" keyword

can be all one line, "implicit return":

const greeting3 = (name) => "Hello $(name)";

instructor prefers writing it all out; preferred practice, not necessarily best practice, not necessarily most readable code. "It's all about readabillity."

---

use const always with function declarations? instructor seems to think so; const for arrays and functions.

const blue = function bluing () {};

---

asynchronous stuff - not getting into that today, as with promises.

---

behind the scenes stuff

execution context:

-when any ...

---

callbacks. getting to this.

"a callback is a function that is passed as an argument to another function

Higher order function:
"a function (method) that takes a function as an argument or returns a function

"This is where the saying vcomes from ' functions are firt-class citizens'
"-meaning functions can be assigned to variables and passed around to other functions

"sample HOF functions:

"Array Methods: forEach, map, filter, reduce, etc."

^^built in higher functions

also, *higher order methods*

---

create our own HOF and callback functions;

can make your own; not common;

function update(cb) {
	const array = [1, 2, 3];
	const output = [];
	for (let i=0; i < array.length; i++) {
		const updated = cd(array[i]);
		output.push(updated);
	}
	return output;

}

//cb above is a function assigned to a variable; array[i] gets passed into the cb function as an argument.

//calling it like a function, inferring it is a function "update(cb)" and "cb(array[i]);"

---


//Callback functions;

function add10(num) {
	return num + 10;
}

function multiplyBy20(num) {
	return num * 20;
}

function stringify(num) {
	return num.toString();
}

any number of functions can be called into a function with parameters; any number of Callbacks can be called into HOFs;

in the declaration above, cb is a callback parameter, but not an argument.

could call add10, multiplyBy20, stringify;

could pass update(stringify) or update(toString);

update(add10), update(multiplyBy20);

---

console.log(update(add10)); // returns [11, 12, 13];

console.log(update(multiplyBy20)); // returns [20, 40, 60]

console.log(update(stringify)); // returns ['1', '2', '3']

---

walking through the steps;

---

callbacks used a lot more often in react, later in course;

function declarations hoisted to the top

function expression is not hoisted, but a function declaration is hoisted to the top; it is not that important in development, but can be an interview question.

function declarations hoisted to the top, arrow functions are not hoisted.

this can be helpful, or not.

sometimes there is one right way; but a lot of times there is not.

helpful to know in the future; again, for interviews;

---
---***---
---

built in higher order functions that are parts of arrays:

let parks = [
	{ name: "Biscayne", rating: 4.2 },
	{ name: "Grand Canyon", rating: 5 },
	{ name: "Gateway Arch", rating: 4.5 },
	{ name: "Indiana Dunes", rating 4.1 },
];

// 1. one liner (implied return)
// forEach replaces a loop***
// implicit return:

parks.forEach(park => console.log(park.name));

// callback is written out as "park => ..."

// 2. longer with {}
parks.forEach(function (park) {
	console.log(park.name);
});

// 3. longer with function declaration instead of arrow function
parks.forEach(function (park) {
	console.log(park.name);
});

// 4. with explicit return statement
parks.forEach((park) => {
	return console.log(park.name);
});

---

// map (returns a new array of same length)
// https://wesbos.com/javascript/09-gettin-loopy/50-looping-and-iterating-mapping

// gets to later lesson in the program

const result = parks.map(park => park.name);
console.log(result);

//

const result = parks.map(park => park.name); // => ["name1", "name2", "name3", "name4"]
console.log(result);
//
//


let result2 = parks.filter((park) => park.rating >= 4.5);
// 1- create new empty array, 2- loop through array 3- if statement for filter 4- push into new array 5- return new array [ << Stepanski's pseudocode]
console.log(result2);

// returns elements as an object; filter returns 2 instead of 4 elements;


// "reduce is the hardest one to figure out"

// "transform reduce, a favorite algorythm?

// the Javascript reduce() function, free books

---

// reduce

week 3 assignment rewritten as reduce;

find average number of characters in an array.

function challengeTwo() {
const names = ["Sam", "Tommy", "Sally", "Buck", "Bob"];

let totalChars = names.reduce((total, current) => total + current.length, 0)

let totalAverage = names.reduce((average, current) => average + current.length / names.length, 0);

console.log(totalChars/names.length);

console.log(totalAverage);

}

// Stepanski showed us the Python Tutor website, very cool walkthroughs for code!! -- first free website I've seen that walks you through step by step each step for a piece of code. That's so cool! -- I've not seen any free resources like that so far

---

challengeTwo() {

// using map:

const names = ["Sam", "Tommy", "Tim", "Sally", "Buck", "Bob"];

let totalChars = names.map(( ) );

let totalAverage = names.map(( ) );

//.....

}

// approaching end of class.
